
Try/catch system
	void f() throw an "error";

	try {
		f()
	}
	catch an error print( error );

	@?
		block (0) {
			const "an"
			const "error"
			body:
				throw 1 2
		}
		const "an"
		body:
			voidcall 1 0
			jumperr 1
			return 0
			geterr 3 4
			eq 2 3 5
			jumpif 5 1
			throw 3 4
			load #std:print 3
			voidcall 3 1
	?@

Try syntax improvement
	try f;
	catch an error print( error );

Compilation parts

	Pass 1:
		Dead code removal
		Class flattening
		Namespace resolution (i.e. X -> A::B::X)
		Local resolution (i.e. x -> [0])
		Type checking

	Pass 2:
		Constant folding
		Bytecode generation (i.e. x + y -> addi 1 2 3)

	Pass 3:
		Bytecode optimisation

Done:
	Dead code removal detection (isSourceStatementTerminal( statement ))
