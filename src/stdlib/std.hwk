
namespace std {

	class void;
	class bool;
	class byte;
	class char;
	class int;
	class float;
	class double;
	class string;

	class void {

	}

	class bool {
		bool operator && (bool) ~~ body: and 1 2 0 }
		bool operator || (bool) ~~ body: or 1 2 0 }
		bool operator ! () ~~ body: not 1 0 }
	}

	class byte {
		bool operator > (byte) ~~ body: ltb 2 1 0 }
		bool operator >= (byte) ~~ body: lteb 2 1 0 }
		bool operator < (byte) ~~ body: ltb 1 2 0 }
		bool operator <= (byte) ~~ body: lteb 1 2 0 }

		bool operator > (int) ~~ body: btoi 1 1; lti 2 1 0 }
		bool operator >= (int) ~~ body: btoi 1 1; ltei 2 1 0 }
		bool operator < (int) ~~ body: btoi 1 1; lti 1 2 0 }
		bool operator <= (int) ~~ body: btoi 1 1; ltei 1 2 0 }

		bool operator > (double) ~~ body: btod 1 1; ltd 2 1 0 }
		bool operator >= (double) ~~ body: btod 1 1; lted 2 1 0 }
		bool operator < (double) ~~ body: btod 1 1; ltd 1 2 0 }
		bool operator <= (double) ~~ body: btod 1 1; lted 1 2 0 }

		int operator + (int) ~~ body: btoi 1 1; addi 1 2 0 }
		int operator - (int) ~~ body: btoi 1 1; subi 1 2 0 }
		int operator * (int) ~~ body: btoi 1 1; muli 1 2 0 }
		int operator / (int) ~~ body: btoi 1 1; divi 1 2 0 }
		int operator % (int) ~~ body: btoi 1 1; modi 1 2 0 }
		int operator ** (int) ~~ body: btoi 1 1; powi 1 2 0 }

		byte operator + (byte) ~~ body: addb 1 2 0 }
		byte operator - (byte) ~~ body: subb 1 2 0 }
		byte operator * (byte) ~~ body: mulb 1 2 0 }
		byte operator / (byte) ~~ body: divb 1 2 0 }
		byte operator % (byte) ~~ body: modb 1 2 0 }
		byte operator ** (byte) ~~ body: powb 1 2 0 }

		double operator + (double) ~~ body: btod 1 1; addd 1 2 0 }
		double operator - (double) ~~ body: btod 1 1; subd 1 2 0 }
		double operator * (double) ~~ body: btod 1 1; muld 1 2 0 }
		double operator / (double) ~~ body: btod 1 1; divd 1 2 0 }
		double operator % (double) ~~ body: btod 1 1; modd 1 2 0 }
		double operator ** (double) ~~ body: btod 1 1; powd 1 2 0 }

		byte operator & (byte) ~~ body: bandb 1 2 0 }
		byte operator | (byte) ~~ body: borb 1 2 0 }
		byte operator ^ (byte) ~~ body: bxorb 1 2 0 }
		byte operator << (byte) ~~ body: blshiftb 1 2 0 }
		byte operator >> (byte) ~~ body: brshiftb 1 2 0 }

		int operator & (int) ~~ body: btoi 1 1; bandi 1 2 0 }
		int operator | (int) ~~ body: btoi 1 1; bori 1 2 0 }
		int operator ^ (int) ~~ body: btoi 1 1; bxori 1 2 0 }
		int operator << (int) ~~ body: btoi 1 1; blshifti 1 2 0 }
		int operator >> (int) ~~ body: btoi 1 1; brshifti 1 2 0 }

		byte operator ~ () ~~ body: bnotb 1 0 }
	}

	class int {
		// the following should work when I add in inline bytecode parsing
		bool operator > (int) ~~ body: lti 2 1 0 }
		bool operator >= (int) ~~ body: ltei 2 1 0 }
		bool operator < (int) ~~ body: lti 1 2 0 }
		bool operator <= (int) ~~ body: ltei 1 2 0 }

		bool operator > (double) ~~ body: itod 1 1; ltd 2 1 0 }
		bool operator >= (double) ~~ body: itod 1 1; lted 2 1 0 }
		bool operator < (double) ~~ body: itod 1 1; ltd 1 2 0 }
		bool operator <= (double) ~~ body: itod 1 1; lted 1 2 0 }

		int operator + (int) ~~ body: addi 1 2 0 }
		int operator - (int) ~~ body: subi 1 2 0 }
		int operator * (int) ~~ body: muli 1 2 0 }
		int operator / (int) ~~ body: divi 1 2 0 }
		int operator % (int) ~~ body: modi 1 2 0 }
		int operator ** (int) ~~ body: powi 1 2 0 }

		double operator + (double) ~~ body: btod 1 1; addd 1 2 0 }
		double operator - (double) ~~ body: btod 1 1; subd 1 2 0 }
		double operator * (double) ~~ body: btod 1 1; muld 1 2 0 }
		double operator / (double) ~~ body: btod 1 1; divd 1 2 0 }
		double operator % (double) ~~ body: btod 1 1; modd 1 2 0 }
		double operator ** (double) ~~ body: btod 1 1; powd 1 2 0 }

		int operator & (int) ~~ body: bandi 1 2 0 }
		int operator | (int) ~~ body: bori 1 2 0 }
		int operator ^ (int) ~~ body: bxori 1 2 0 }
		int operator << (int) ~~ body: blshifti 1 2 0 }
		int operator >> (int) ~~ body: brshifti 1 2 0 }

		int operator ~ () ~~ body: bnoti 1 0 }
	}

	class float {
		bool operator > (float) ~~ body: ltf 2 1 0 }
		bool operator >= (float) ~~ body: ltef 2 1 0 }
		bool operator < (float) ~~ body: ltf 1 2 0 }
		bool operator <= (float) ~~ body: ltef 1 2 0 }

		bool operator > (int) ~~ body: ftoi 1 1; lti 2 1 0 }
		bool operator >= (int) ~~ body: ftoi 1 1; ltei 2 1 0 }
		bool operator < (int) ~~ body: ftoi 1 1; lti 1 2 0 }
		bool operator <= (int) ~~ body: ftoi 1 1; ltei 1 2 0 }
		
		bool operator > (double) ~~ body: ftod 1 1; ltd 2 1 0 }
		bool operator >= (double) ~~ body: ftod 1 1; lted 2 1 0 }
		bool operator < (double) ~~ body: ftod 1 1; ltd 1 2 0 }
		bool operator <= (double) ~~ body: ftod 1 1; lted 1 2 0 }

		float operator + (int);
		float operator - (int);
		float operator * (int);
		float operator / (int);
		float operator % (int);
		float operator ** (int);

		float operator + (float);
		float operator - (float);
		float operator * (float);
		float operator / (float);
		float operator % (float);
		float operator ** (float);

		double operator + (double);
		double operator - (double);
		double operator * (double);
		double operator / (double);
		double operator % (double);
		double operator ** (double);
	}

	class double {
		bool operator > (int) ~~ body: dtoi 1 1; lti 2 1 0 }
		bool operator >= (int) ~~ body: dtoi 1 1; ltei 2 1 0 }
		bool operator < (int) ~~ body: dtoi 1 1; lti 1 2 0 }
		bool operator <= (int) ~~ body: dtoi 1 1; ltei 1 2 0 }
		
		bool operator > (double) ~~ body: ltd 2 1 0 }
		bool operator >= (double) ~~ body: lted 2 1 0 }
		bool operator < (double) ~~ body: ltd 1 2 0 }
		bool operator <= (double) ~~ body: lted 1 2 0 }

		float operator + (int);
		float operator - (int);
		float operator * (int);
		float operator / (int);
		float operator % (int);
		float operator ** (int);

		double operator + (double);
		double operator - (double);
		double operator * (double);
		double operator / (double);
		double operator % (double);
		double operator ** (double);
	}

	class string {
		char operator[](int);
		void operator[](int, char);

		string operator + (string);
		string operator + (int);
		string operator + (double);
		string operator + (char);
		string operator + (bool);

		string operator - (string);

		string operator * (int);
	}

	namespace console {

		// std::console::print/write will be resolved by the bytecode parser/executable generator
		void print(string);
		void write(string);

	}
}
